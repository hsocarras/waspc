Ingenieria inversa a WASM_MICRO_RUNTIME de la byte code alliance.

En el main.c del port the windows seguir el execution path para el modo interpreter.

main.c-> main: //line 261
    RunningMode running_mode = Mode_Interp;
    //Ingenieria inversa para el multymodule despues.
    //Ingenieria inversa para el WASM_ENABLE_DEBUG_INTERP despues

    El ciclo for parsea las opciones, al terminar argv esta apuntando al path del archivo wasm (line 437)
    
    RuntimeInitArgs init_args;
    memset(&init_args, 0, sizeof(RuntimeInitArgs));
    init_args.running_mode = running_mode;

    wasm_runtime_full_init(&init_args) (line 473)

    uint8 *wasm_file_buf = NULL;
    wasm_file_buf = (uint8 *)bh_read_file_to_buffer(wasm_file, &wasm_file_size))  (line 483)

    wasm_module_t wasm_module = NULL;
    wasm_module = wasm_runtime_load(wasm_file_buf, wasm_file_size, error_buf, sizeof(error_buf)) (line 514)

    wasm_module_inst_t wasm_module_inst = NULL;
    wasm_module_inst = wasm_runtime_instantiate(wasm_module, stack_size, heap_size, error_buf, sizeof(error_buf)) (line 525)

    const char *exception = NULL;
    exception = app_instance_main(wasm_module_inst); (line 562) //llamada a la funcion main del modulo

wasm_export.h -> RunningMode datatype (line 189)
        /* Running mode of runtime and module instance*/
        typedef enum RunningMode {
            Mode_Interp = 1,
            Mode_Fast_JIT,
            Mode_LLVM_JIT,
            Mode_Multi_Tier_JIT,
        } RunningMode;

wasm_export.h -> RuntimeInitArgs datatype (line 197)
    typedef struct RuntimeInitArgs {
        mem_alloc_type_t mem_alloc_type;
        MemAllocOption mem_alloc_option;

        const char *native_module_name;
        NativeSymbol *native_symbols;
        uint32_t n_native_symbols;

        /* maximum thread number, only used when
        WASM_ENABLE_THREAD_MGR is defined */
        uint32_t max_thread_num;

        /* Debug settings, only used when
        WASM_ENABLE_DEBUG_INTERP != 0 */
        char ip_addr[128];
        int unused; /* was platform_port */
        int instance_port;

        /* Fast JIT code cache size */
        uint32_t fast_jit_code_cache_size;

        /* Default GC heap size */
        uint32_t gc_heap_size;

        /* Default running mode of the runtime */
        RunningMode running_mode;

        /* LLVM JIT opt and size level */
        uint32_t llvm_jit_opt_level;
        uint32_t llvm_jit_size_level;
        /* Segue optimization flags for LLVM JIT */
        uint32_t segue_flags;
        /**
        * If enabled
        * - llvm-jit will output a jitdump file for `perf inject`
        * - aot will output a perf-${pid}.map for `perf record`
        * - fast-jit. TBD
        * - multi-tier-jit. TBD
        * - interpreter. TBD
        */
        bool enable_linux_perf;
    } RuntimeInitArgs;

wasm_runtime_common.c -> wasm_runtime_full_init (line 788)
    static int32 runtime_ref_count = 0; global variable
    bool wasm_runtime_full_init(RuntimeInitArgs *init_args) {
        bool ret = true;  // turen es ok

        Si todo esta bien        
        ret = wasm_runtime_full_init_internal(init_args);
        

        return ret;
}



    /OJO
    wasm_native.c -> wasm_native_init